# Здесь будет OpenAPI описание всех доступных эндпоинтов и моделей данных.
openapi: 3.0.3
info:
  title: Bank Card Management System API
  description: API для управления банковскими картами с аутентификацией JWT
  version: 1.0.0
  contact:
    name: Bank API Support
    email: support@bank.com

servers:
  - url: http://localhost:8080/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string

    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "user1"
        password:
          type: string
          example: "user123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        role:
          type: string

    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        cardHolder:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
          format: double
          example: 1000.50

    CardCreateRequest:
      type: object
      required:
        - cardHolder
        - expirationDate
        - userId
      properties:
        cardHolder:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        initialBalance:
          type: number
          format: double
          example: 1000.00
        userId:
          type: integer
          format: int64
          example: 1

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
          example: 1
        toCardId:
          type: integer
          format: int64
          example: 2
        amount:
          type: number
          format: double
          example: 100.00
        description:
          type: string
          example: "Monthly transfer"

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, USER]
        active:
          type: boolean

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Аутентификация пользователя
      description: Возвращает JWT токен для аутентифицированного пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/my:
    get:
      tags:
        - Cards
      summary: Получить карты текущего пользователя
      description: Возвращает список карт с пагинацией для аутентифицированного пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы (начинается с 0)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Поле для сортировки
          schema:
            type: string
            default: "id"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDto'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards:
    get:
      tags:
        - Cards
      summary: Получить все карты (только для администраторов)
      description: Возвращает список всех карт в системе
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDto'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Cards
      summary: Создать новую карту (только для администраторов)
      description: Создает новую банковскую карту для указанного пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        '200':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '400':
          description: Неверные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{id}:
    get:
      tags:
        - Cards
      summary: Получить карту по ID
      description: Возвращает информацию о конкретной карте
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Cards
      summary: Удалить карту (только для администраторов)
      description: Удаляет карту по ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Карта успешно удалена
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{id}/status:
    patch:
      tags:
        - Cards
      summary: Изменить статус карты (только для администраторов)
      description: Обновляет статус карты (АКТИВНА, ЗАБЛОКИРОВАНА, ИСТЕК СРОК)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
      responses:
        '200':
          description: Статус успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '400':
          description: Неверный статус
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Карта не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/transfer:
    post:
      tags:
        - Transfers
      summary: Перевод между собственными картами
      description: Выполняет перевод денежных средств между картами текущего пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Перевод выполнен успешно
        '400':
          description: Недостаточно средств или неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Получить всех пользователей (только для администраторов)
      description: Возвращает список всех пользователей системы
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
